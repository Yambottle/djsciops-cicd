name: u24_workflow_release
on:
  workflow_call:
    inputs:
      jhub_ver:
        required: true
        type: string
      py_ver:
        required: true
        type: string
      dist:
        required: true
        type: string
    secrets:
      REGISTRY_USERNAME:
        required: true
      REGISTRY_PASSWORD:
        required: true

jobs:
  publish_env_image:
    runs-on: ubuntu-latest
    env:
      JHUB_VER: ${{inputs.jhub_ver}}
      PY_VER: ${{inputs.py_ver}}
      DIST: ${{inputs.dist}}
      WORKFLOW_VERSION: ${{inputs.workflow_version}}
    steps:
      - name: Checkout workflow repo
        uses: actions/checkout@v3
      - name: Get changelog entry
        id: changelog_reader
        uses: guzman-raphael/changelog-reader-action@v5
        with:
          path: ./CHANGELOG.md
      - name: Verify changelog parsing
        env:
          TAG_NAME: ${{steps.changelog_reader.outputs.version}}
          RELEASE_NAME: Release ${{steps.changelog_reader.outputs.version}}
          BODY: ${{steps.changelog_reader.outputs.changes}}
          PRERELEASE: ${{steps.changelog_reader.outputs.status == 'prereleased'}}
          DRAFT: ${{steps.changelog_reader.outputs.status == 'unreleased'}}
        run: |
          echo "TAG_NAME=${TAG_NAME}"
          echo "RELEASE_NAME=${RELEASE_NAME}"
          echo "BODY=${BODY}"
          echo "PRERELEASE=${PRERELEASE}"
          echo "DRAFT=${DRAFT}"
      - name: Get meta
        id: get_meta
        run: |
          export PKG_NAME=$(ls | grep workflow)
          export REPO_NAME=$(echo ${{github.repository}} | awk -F\/ '{print $2}')
          export WORKFLOW_VERSION=$(cat ${PKG_NAME}/version.py | grep -oP '\d+\.\d+\.[a-z0-9]+')
          echo "::set-output name=repo_name::${REPO_NAME}"
          echo "::set-output name=workflow_version::${WORKFLOW_VERSION}"
      # - name: Fetch image archive from Artifact
      #   uses: actions/download-artifact@v2
      #   with:
      #     name: "image-codebook-${{steps.get_meta.outputs.repo_name}}-jhub${{env.JHUB_VER}}-py${{env.PY_VER}}-${{env.DIST}}-${{steps.get_meta.outputs.workflow_version}}"
      - name: Fetch pip artifacts
        uses: actions/github-script@v3.1.0
        with:
          script: |
            var artifacts = await github.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: ${{github.event.workflow_run.id }},
            });
            var matchArtifact = artifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "image-codebook-${{steps.get_meta.outputs.repo_name}}-jhub${{env.JHUB_VER}}-py${{env.PY_VER}}-${{env.DIST}}-${{steps.get_meta.outputs.workflow_version}}"
            })[0];
            var download = await github.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            var fs = require('fs');
            fs.writeFileSync('image-codebook-${{steps.get_meta.outputs.repo_name}}-jhub${{env.JHUB_VER}}-py${{env.PY_VER}}-${{env.DIST}}-${{steps.get_meta.outputs.workflow_version}}.tar.gz', Buffer.from(download.data));
      - name: Create GH release
        id: create_gh_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          tag_name: ${{steps.changelog_reader.outputs.version}}
          release_name: Release ${{steps.changelog_reader.outputs.version}}
          body: ${{steps.changelog_reader.outputs.changes}}
          prerelease: ${{steps.changelog_reader.outputs.status == 'prereleased'}}
          draft: ${{steps.changelog_reader.outputs.status == 'unreleased'}}
      - name: Upload image archive to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          upload_url: ${{steps.create_gh_release.outputs.upload_url}}
          asset_path: "image-codebook-${{steps.get_meta.outputs.repo_name}}-jhub${{env.JHUB_VER}}-py${{env.PY_VER}}-${{env.DIST}}-${{steps.get_meta.outputs.workflow_version}}.tar.gz"
          asset_name: "image-codebook-${{steps.get_meta.outputs.repo_name}}-jhub${{env.JHUB_VER}}-py${{env.PY_VER}}-${{env.DIST}}-${{steps.get_meta.outputs.workflow_version}}.tar.gz"
          asset_content_type: application/gzip
      - name: Load image archive to docker
        run: |
          ## If your local machine is not the same as the "runs-on", this step would fail: invalid tar header
          docker load \
            -i "image-codebook-${{steps.get_meta.outputs.repo_name}}-jhub${{env.JHUB_VER}}-py${{env.PY_VER}}-${{env.DIST}}-${{steps.get_meta.outputs.workflow_version}}.tar.gz"
      - name: Login to vathes Registry
        uses: docker/login-action@v1
        with:
          registry: docker.io
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - name: Push image
        run: |
          export IMAGE=datajoint/codebook_${{steps.get_meta.outputs.repo_name}}
          export TAG=jhub${{env.JHUB_VER}}-py${{env.PY_VER}}-${{env.DIST}}-${{steps.get_meta.outputs.workflow_version}}
          docker push "${IMAGE}:${TAG}"
          docker tag "${IMAGE}:${TAG}" "${IMAGE}:${TAG}-${GITHUB_SHA:0:7}"
          docker push "${IMAGE}:${TAG}-${GITHUB_SHA:0:7}"
          [ "$PY_VER" == "3.8" ] && [ "$DISTRO" == "alpine" ] \
                  && docker tag "${IMAGE}:${TAG}" "${IMAGE}:latest" \
                  && docker push "${IMAGE}:latest" \
              || echo "skipping 'latest' tag..."