# Tasks that require semantic versioning info
name: semantic-versioning
on:
  workflow_call:
    outputs:
      new_tag:
        description: ""
        value: ${{ jobs.get_version.outputs.new_tag }}
      new_version:
        description: ""
        value: ${{ jobs.get_version.outputs.new_version }}
      previous_tag:
        description: ""
        value: ${{ jobs.get_version.outputs.previous_tag }}
      previous_version:
        description: ""
        value: ${{ jobs.get_version.outputs.previous_version }}
      release_type:
        description: ""
        value: ${{ jobs.get_version.outputs.release_type }}
      changelog:
        description: ""
        value: ${{ jobs.get_version.outputs.changelog }}
      repo_lower:
        description: ""
        value: ${{ jobs.get_version.outputs.repo_lower }}
      datetime:
        description: ""
        value: ${{ jobs.get_version.outputs.datetime }}
      id:
        description: ""
        value: ${{ jobs.create_tag_and_release.outputs.id }}
      html_url:
        description: ""
        value: ${{ jobs.create_tag_and_release.outputs.html_url }}
      upload_url:
        description: ""
        value: ${{ jobs.create_tag_and_release.outputs.upload_url }}

jobs:
  get_version:
    runs-on: ubuntu-latest
    steps:
      - name: 🛎️  Checkout repository
        id: check-repo
        uses: actions/checkout@v3

      - name: 🏷️  Get semantic version tag
        id: semver_tag
        uses: ./.github/actions/semver-info
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      new_tag: ${{ steps.semver_tag.outputs.new_tag }}
      new_version: ${{ steps.semver_tag.outputs.new_version }}
      previous_tag: ${{ steps.semver_tag.outputs.previous_tag }}
      previous_version: ${{ steps.semver_tag.outputs.previous_version }}
      release_type: ${{ steps.semver_tag.outputs.release_type }}
      changelog: ${{ steps.semver_tag.outputs.changelog }}
      repo_lower: ${{ steps.semver_tag.outputs.repo_lower }}
      datetime: ${{ steps.semver_tag.outputs.datetime }}

  push_version_file:
    needs: get_version
    if: always() && needs.get_version.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: 🛎️  Checkout repository
        id: check-repo
        uses: actions/checkout@v3

      - name: 🗄️  Nox venv cache
        id: cache_nox
        uses: actions/cache@v2
        with:
          path: .nox
          key: ${{ runner.os }}-nox-pythons

      - name: 🐍  Setup nox
        uses: excitedleigh/setup-nox@v2

      - name: 🐍  Bump python package version
        run: |
          nox --non-interactive -v -s write_version -- --pversion ${{ needs.get_version.outputs.previous_version }} --version ${{ needs.get_version.outputs.new_version }}
          if [ -z "$(git status --porcelain)" ]; then
            echo "No change in existing 'version.py' file."
            exit 0
          fi
          echo -e "::debug::Committing and pushing:\n$(git status --porcelain)"
          git commit -m "ci(versioning): write ver ${{ needs.get_version.outputs.new_version }} to 'version.py'"
          git push origin HEAD:main

  create_tag_and_release:
    needs: [push_version_file, get_version]
    if: always() && needs.push_version_file.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: 🛎️  Checkout repository
        id: check-repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 🏷️  Create a tag and a release
        id: semver_tag
        uses: ./.github/actions/tag-and-release
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          new_tag: ${{ needs.get_version.outputs.new_tag }}
          new_version: ${{ needs.get_version.outputs.new_version }}
          release_type: ${{ needs.get_version.outputs.release_type }}
          changelog: ${{ needs.get_version.outputs.changelog }}
          release_only: "['major','minor']"
    outputs:
      id: ${{ steps.semver_tag.outputs.id }}
      html_url: ${{ steps.semver_tag.outputs.html_url }}
      upload_url: ${{ steps.semver_tag.outputs.upload_url }}

  if_run_tests_failed:
    if: ${{ github.event.workflow_run.conclusion == 'failure' }}
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo "The 'run-tests' workflow failed or did not run. Skipping 'semantic-versioning' workflow."

#
