# Tasks that require semantic versioning info
name: semantic-versioning
on:
  workflow_call:
    inputs:
      create_release:
        description: "Set to 'false' to always skip creating a new tag and release"
        default: true
        type: boolean
        required: false
      release_types:
        description: "List of single-quoted, comma separated values of release type names to be considered for release, e.g., major,minor,patch"
        default: major,minor,patch
        type: string
        required: false
      release_branch:
        description: "The originating branch that is allowed to trigger pushing version changes and creating releases. Otherwise, only version information is collected."
        default: main
        type: string
        required: false

    outputs:
      new_tag:
        description: "New tag with the 'v' prefix"
        value: ${{ jobs.get_version.outputs.new_tag }}
      new_version:
        description: "New version without the prefix"
        value: ${{ jobs.get_version.outputs.new_version }}
      previous_tag:
        description: "Previous tag with the 'v' prefix"
        value: ${{ jobs.get_version.outputs.previous_tag }}
      previous_version:
        description: "Previous version without the prefix"
        value: ${{ jobs.get_version.outputs.previous_version }}
      release_type:
        description: "Release type for new version"
        value: ${{ jobs.get_version.outputs.release_type }}
      changelog:
        description: "Changelog generated from commits"
        value: ${{ jobs.get_version.outputs.changelog }}
      repo_lower:
        description: "Repository name but lowercase"
        value: ${{ jobs.get_version.outputs.repo_lower }}
      datetime:
        description: "Datetime when action was used"
        value: ${{ jobs.get_version.outputs.datetime }}
      id:
        description: "The identifier of the created release"
        value: ${{ jobs.create_tag_and_release.outputs.id }}
      html_url:
        description: "The HTML URL of the release"
        value: ${{ jobs.create_tag_and_release.outputs.html_url }}
      upload_url:
        description: "The URL for uploading assets to the release"
        value: ${{ jobs.create_tag_and_release.outputs.upload_url }}

jobs:
  get_version:
    runs-on: ubuntu-latest
    steps:
      - name: 🛎️  Checkout repository
        id: check-repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - id: set-datetime
        run: echo "::set-output name=datetime::$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
        shell: bash

      - id: set-repo-lower
        run: echo "::set-output name=repo_lower::$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')"
        shell: bash

      - name: 🏷️  Get new semantic version string
        id: semver_tag
        uses: mathieudutour/github-tag-action@v6.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          release_branches: ${{ inputs.release_branch }}
          pre_release_branches: develop,dev,wip
          fetch_all_tags: true
          dry_run: true
          default_bump: false
          custom_release_rules: force_bump_patch:patch,force_bump_minor:minor,force_bump_major:major

      - id: correct-no-version
        run: |
          echo "::set-output name=bumped::false"
          if [ -z "${{ steps.semver_tag.outputs.new_tag }}" ]; then
            echo "::set-output name=new_tag::${{ steps.semver_tag.outputs.previous_tag }}"
            echo "::set-output name=new_version::${{ steps.semver_tag.outputs.previous_version }}"
          else
            echo "::set-output name=new_tag::${{ steps.semver_tag.outputs.new_tag }}"
            echo "::set-output name=new_version::${{ steps.semver_tag.outputs.new_version }}"
            [[ "${{ steps.semver_tag.outputs.new_tag }}"="${{ steps.semver_tag.outputs.previous_tag }}" ]] || echo "::set-output name=bumped::true"
          fi
          RELEASE_ONLY="['$(echo "${{ inputs.release_types }}" | sed "s/\\,/\\','/g" | sed 's/ //g')']"
          echo "::set-output name=release_array::${RELEASE_ONLY}"
        shell: bash

    outputs:
      new_tag: ${{ steps.correct-no-version.outputs.new_tag }}
      new_version: ${{ steps.correct-no-version.outputs.new_version }}
      previous_tag: ${{ steps.semver_tag.outputs.previous_tag }}
      previous_version: ${{ steps.semver_tag.outputs.previous_version }}
      release_type: ${{ steps.semver_tag.outputs.release_type }}
      changelog: ${{ steps.semver_tag.outputs.changelog }}
      repo_lower: ${{ steps.set-repo-lower.outputs.repo_lower }}
      datetime: ${{ steps.set-datetime.outputs.datetime }}
      release_array: ${{ steps.correct-no-version.outputs.release_array }}
      bumped: ${{ steps.correct-no-version.outputs.bumped }}

  update_version_files:
    needs: get_version
    if: |
      always() &&
      (github.ref_name == '${{ inputs.release_branch }}') &&
      (needs.get_version.result == 'success') &&
      (needs.get_version.bumped == 'true' || needs.get_version.outputs.new_version == '0.0.0')
    runs-on: ubuntu-latest
    steps:
      - name: 🛎️  Checkout repository
        id: check-repo
        uses: actions/checkout@v3

      - name: 🐍  Bump python package version
        id: update-version-dot-py
        run: |
          PKG_VERSION_FILE=src/*/version.py
          PREV_PKG_VER=$(grep -Eo "(\"|').*(\"|')$" $PKG_VERSION_FILE | cut -d '"' -f 2 | cut -d "'" -f 2)
          echo -e "PKG_VERSION_FILE=$PKG_VERSION_FILE\nPREV_PKG_VER=$PREV_PKG_VER"
          [[ -z $PREV_PKG_VER ]] && exit 1
          echo -e "__version__ = \"${{ needs.get_version.outputs.new_version }}\"" > $PKG_VERSION_FILE
        shell: bash

      - name: 📜  Update changelog
        id: update-changelog
        run: |
          echo -e "changelog=\n${{ needs.get_version.outputs.changelog }}"
          [[ -z "${{ needs.get_version.outputs.changelog }}" ]] && exit 0
          [[ ! -f CHANGELOG.md ]] && exit 0
          NEWSEC_STR="## \`${{ needs.get_version.outputs.new_tag }}\`"
          CHANGELOG_STR=$(sed '1d' <<< "${{ needs.get_version.outputs.changelog }}")
          echo -e "NEWSEC_STR=${NEWSEC_STR}\nCHANGELOG_STR=\n${CHANGELOG_STR}"
          [[ -z "${CHANGELOG_STR}" ]] && exit 0
          sed -i '/Changelog/r'<(printf "\n%s\n%s\n\n" "$NEWSEC_STR" "$CHANGELOG_STR") CHANGELOG.md
        shell: bash

      - name: 📌  Push changes
        id: push-ver-changes
        run: |
          echo -e "Committing and pushing:\n$(git status --porcelain)"
          if [ -z "$(git status --porcelain)" ]; then
            echo "No versioning file changes."
            exit 0
          fi
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add .
          git commit -m "chore(semver): update files with new version information"
          git push origin HEAD:${{ inputs.release_branch }}
        shell: bash

  create_tag_and_release:
    needs: [get_version, update_version_files]
    if: |
      always() &&
      (needs.get_version.result == 'success') &&
      (needs.update_version_files.result == 'success') &&
      (inputs.create_release == 'true') &&
      (github.ref_name == '${{ inputs.release_branch }}')
    runs-on: ubuntu-latest
    steps:
      - name: 🛎️  Checkout repository
        id: check-repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 🏷️  Create and push a new semver tag
        id: push-new-tag
        shell: bash
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git tag -a ${{ needs.get_version.outputs.new_tag }} --force -m "chore(semver): tagging ${{ needs.get_version.outputs.new_tag }}:${{ inputs.release_type }}"
          git push -f origin ${{ needs.get_version.outputs.new_tag }}

      - name: 📦  Create a new release from semver tag
        id: release-version
        if: |
          always() &&
          (!contains('pre', ${{ needs.get_version.outputs.release_type }})) &&
          (contains(fromJSON(${{ needs.get_version.outputs.release_array }}), ${{ needs.get_version.outputs.release_type }}))
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ needs.get_version.outputs.new_tag }}
          name: ${{ needs.get_version.outputs.release_type }} release ${{ needs.get_version.outputs.new_version }}
          body: ${{ needs.get_version.outputs.changelog }}
          allowUpdates: true
          generateReleaseNotes: true

    outputs:
      id: ${{ steps.release-version.outputs.id }}
      html_url: ${{ steps.release-version.outputs.html_url }}
      upload_url: ${{ steps.release-version.outputs.upload_url }}
