#### For running in Github Action
  ##### Need to manually add deploy private key to
  ##### Settings->Secrets->Actions: REGISTRY_USERNAME REGISTRY_PASSWORD
#### For running locally using act
  ##### create a .secrets file just like .env, for example:
  ##### act --secret-file ./.github/workflows/.secrets
name: sciops_docker_images
on:
  workflow_call:
    inputs:
      jhub_ver:
        required: true
        type: string
      py_ver:
        required: true
        type: string
      dist:
        required: true
        type: string
      codebook_base_hash:
        required: true
        type: string
      workflow_version:
        required: true
        type: string
      release_upload_url:
        required: true
        type: string
    secrets:
      BOT_SSH_KEY:
        required: true
      REGISTRY_USERNAME:
        required: true
      REGISTRY_PASSWORD:
        required: true
jobs:
  ## Build/Publish codebook env image
  build_codebook_image:
    runs-on: ubuntu-latest
    env:
      JHUB_VER: ${{inputs.jhub_ver}}
      PY_VER: ${{inputs.py_ver}}
      DIST: ${{inputs.dist}}
      CODEBOOK_BASE_HASH: ${{inputs.codebook_base_hash}}
      WORKFLOW_VERSION: ${{inputs.workflow_version}}
    steps:
      - name: Checkout workflow repo
        uses: actions/checkout@v3
        with:
          path: 'main'
      - name: Checkout cicd repo that has common docker template
        uses: actions/checkout@v3
        with:
          repository: 'yambottle/djsciops-cicd'
          path: 'cicd'
      - id: build_env
        name: Build codebook env image
        run: |
          ## Get docker template
          cp -r ./cicd/docker-template/codebook_env ./main/docker/

          ## Get build info
          cd ./main/docker/codebook_env
          export REPO_NAME=${{github.event.repository.name}}
          export REPO_OWNER=${{github.repository_owner}}

          echo "${{secrets.BOT_SSH_KEY}}" | base64 -di >> ${REPO_NAME}-deploy.pem
          chmod u=r,g-rwx,o-rwx ${REPO_NAME}-deploy.pem
          export DEPLOY_KEY=${REPO_NAME}-deploy.pem

          ## Build image
          docker-compose -f dist/${DIST}/docker-compose-codebook_env.yaml build

          # cd ../
          # docker save \
          #   -o image-codebook-${REPO_NAME}-jhub${JHUB_VER}-py${PY_VER}-${DIST}-${WORKFLOW_VERSION}.tar \
          #   "registry.vathes.com/sciops/codebook-${REPO_NAME}:jhub${JHUB_VER}-py${PY_VER}-${DIST}-${WORKFLOW_VERSION}"
          # gzip -S ".gz" image-codebook-${REPO_NAME}-jhub${JHUB_VER}-py${PY_VER}-${DIST}-${WORKFLOW_VERSION}.tar
      # - name: Add codebook env image archive to Artifact
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: "image-codebook-${{steps.compile_env.outputs.repo_name}}\
      #       -jhub${{env.JHUB_VER}}-py${{env.PY_VER}}-${{env.DIST}}-${{env.WORKFLOW_VERSION}}"
      #     path: "image-codebook-${{steps.compile_env.outputs.repo_name}}\
      #       -jhub${{env.JHUB_VER}}-py${{env.PY_VER}}-${{env.DIST}}-${{env.WORKFLOW_VERSION}}.tar.gz"
      #     !!merge <<: *dev-retention
      - name: Login to vathes Registry
        uses: docker/login-action@v1
        with:
          registry: registry.vathes.com
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - name: Push codebook image
        if: |
          github.event_name == 'push' &&
          startsWith(github.ref, 'refs/tags') &&
          github.repository_owner == 'yambottle'
        run: |
          export IMAGE=registry.vathes.com/sciops/codebook_${{github.event.repository.name}}
          export TAG=jhub${{env.JHUB_VER}}-py${{env.PY_VER}}-${{env.DIST}}-${{env.WORKFLOW_VERSION}}
          echo ${IMAGE} ${TAG}
          docker push "${IMAGE}:${TAG}"
          docker tag "${IMAGE}:${TAG}" "${IMAGE}:${TAG}-${GITHUB_SHA:0:7}"
          docker push "${IMAGE}:${TAG}-${GITHUB_SHA:0:7}"
          echo $PY_VER $DIST
          [ "${PY_VER}" == "3.9" ] && [ "${DIST}" == "alpine" ] \
                  && docker tag "${IMAGE}:${TAG}" "${IMAGE}:latest" \
                  && docker push "${IMAGE}:latest" \
                  && echo "pushed 'latest' tag..." \
              || echo "skipping 'latest' tag..."
  ## Build/Publish standard worker
  build_worker_images:
    runs-on: ubuntu-latest
    env:
      PY_VER: ${{inputs.py_ver}}
      DIST: ${{inputs.dist}}
    steps:
      - name: Checkout workflow repo
        uses: actions/checkout@v3
      - id: build_workers
        name: Build worker images
        run: |
          ## Get build info
          cd ./docker

          export REPO_NAME=${{github.event.repository.name}}
          export REPO_OWNER=${{github.repository_owner}}

          echo "${{secrets.BOT_SSH_KEY}}" | base64 -di >> ${REPO_NAME}-deploy.pem
          chmod u=r,g-rwx,o-rwx ${REPO_NAME}-deploy.pem
          export DEPLOY_KEY=${REPO_NAME}-deploy.pem

          ## Build workers
          find . -maxdepth 1 -type d \( -iname "*" ! -iname "*local*" \) | awk "NR>1" | cut -d/ -f2 | while read -r DIR; do
            echo "::debug::Searching for a docker-compose file in ${DIR}"
            (
              cd "${DIR}" || exit
              set -a
              cp ../"${REPO_NAME}"-deploy.pem .
              [[ -f build.env ]] && source build.env
              docker-compose -f dist/"${DIST}"/docker-compose-"${DIR}".yaml build
              set +a
            )
          done

          # cd ../
          # docker save \
          #   -o image-standard-${REPO_NAME}-py${PY_VER}-${DIST}-${WORKFLOW_VERSION}.tar \
          #   "registry.vathes.com/${{github.repository_owner}}/standard-${REPO_NAME}:py${PY_VER}-${DIST}-${WORKFLOW_VERSION}"
          # gzip -S ".gz" image-standard-${REPO_NAME}-py${PY_VER}-${DIST}-${WORKFLOW_VERSION}.tar
      # - name: Add standard worker image archive to Artifact
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: "image-standard-${{steps.compile_worker.outputs.repo_name}}\
      #       -py${{env.PY_VER}}-${{env.DIST}}-${{env.WORKFLOW_VERSION}}"
      #     path: "image-standard-${{steps.compile_worker.outputs.repo_name}}\
      #       -py${{env.PY_VER}}-${{env.DIST}}-${{env.WORKFLOW_VERSION}}.tar.gz"
      #     !!merge <<: *dev-retention
      - name: Login to vathes Registry
        uses: docker/login-action@v1
        with:
          registry: registry.vathes.com
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - name: Push worker images
        if: |
          github.event_name == 'push' &&
          startsWith(github.ref, 'refs/tags') &&
          github.repository_owner == 'yambottle'
        run: |-
          cd ./docker

          find . -maxdepth 1 -type d \( -iname "*" ! -iname "*local*" \) | awk "NR>1" | cut -d/ -f2 | while read DIR;
          do
              cd ${DIR};
              set -a;
              source build.env;
              IMAGE_TAG=$(grep image: ./dist/${DIST}/docker-compose-${DIR}.yaml | \
                envsubst | sed 's/image://' | tr -d ' ')

              export IMAGE=$(echo ${IMAGE_TAG} | awk -F: '{print $1}');
              export TAG=$(echo ${IMAGE_TAG} | awk -F: '{print $2}');
              echo $IMAGE $TAG;
              docker push "${IMAGE}:${TAG}"
              docker tag "${IMAGE}:${TAG}" "${IMAGE}:${TAG}-${GITHUB_SHA:0:7}"
              docker push "${IMAGE}:${TAG}-${GITHUB_SHA:0:7}"
              echo $PY_VER $DIST;
              [ "${PY_VER}" == "3.9" ] && [ "${DIST}" == "alpine" ] \
                      && docker tag "${IMAGE}:${TAG}" "${IMAGE}:latest" \
                      && docker push "${IMAGE}:latest" \
                      && echo "pushed 'latest' tag..." \
                  || echo "skipping 'latest' tag..."
          done
