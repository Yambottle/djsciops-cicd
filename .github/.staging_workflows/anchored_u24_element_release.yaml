name: u24_element_release

on:
  workflow_call:
    inputs:
      py_ver:
        type: string
        required: true
      twine_repo:
        type: string
    secrets:
      TWINE_USERNAME:
        required: true
      TWINE_PASSWORD:
        required: true

anchor-dev-cicd-repo: &dev-cicd-repo
  repository: 'yambottle/djsciops-cicd'

anchor-test-cicd-repo: &test-cicd-repo
  repository: 'yambottle/djsciops-cicd'

anchor-prod-cicd-repo: &prod-cicd-repo
  repository: 'dj-sciops/djsciops-cicd'

jobs:
  publish-release:
    runs-on: ubuntu-latest
    env:
      PY_VER: ${{inputs.py_ver}}
      TWINE_REPO: ${{inputs.twine_repo}}
      TWINE_USERNAME: ${{secrets.TWINE_USERNAME}}
      TWINE_PASSWORD: ${{secrets.TWINE_PASSWORD}}
    steps:
      - name: Checkout element repo
        uses: actions/checkout@v2
      - name: Checkout cicd repo
        uses: actions/checkout@v2
        with:
          !!merge <<: *$STAGE-cicd-repo
          path: 'cicd'
      - uses: actions/setup-python@v4
        with:
          python-version: ${{env.PY_VER}} 
      - name: Determine package version
        run: |
          PKG_NAME=$(python3 -c "print([p for p in __import__('setuptools').find_packages() if '.' not in p][0])")
          SDIST_PKG_NAME=$(echo ${PKG_NAME} | sed 's|_|-|g')
          PKG_VERSION=$(cat ${PKG_NAME}/version.py | grep -oP '\d+\.\d+\.[a-z0-9]+')
          echo "PKG_NAME=${PKG_NAME}" >> $GITHUB_ENV
          echo "PKG_VERSION=${PKG_VERSION}" >> $GITHUB_ENV
          echo "SDIST_PKG_NAME=${SDIST_PKG_NAME}" >> $GITHUB_ENV
      - name: Get changelog entry
        id: changelog_reader
        uses: guzman-raphael/changelog-reader-action@v5
        with:
          path: ./CHANGELOG.md
          version: ${{env.PKG_VERSION}}
      - name: Create draft GH release
        id: create_draft_gh_release
        uses: actions/create-release@v1
        if: ${{ contains(env.TWINE_REPO, 'testpypi') }}
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          tag_name: ${{steps.changelog_reader.outputs.version}}
          release_name: Release ${{steps.changelog_reader.outputs.version}}
          body: ${{steps.changelog_reader.outputs.changes}}
          prerelease: ${{steps.changelog_reader.outputs.status == 'prereleased'}}
          draft: true
      - name: Create GH release
        id: create_gh_release
        uses: actions/create-release@v1
        if: ${{ !contains(env.TWINE_REPO, 'testpypi') }} 
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          tag_name: ${{steps.changelog_reader.outputs.version}}
          release_name: Release ${{steps.changelog_reader.outputs.version}}
          body: ${{steps.changelog_reader.outputs.changes}}
          prerelease: ${{steps.changelog_reader.outputs.status == 'prereleased'}}
          draft: ${{steps.changelog_reader.outputs.status == 'unreleased'}}
      - name: Get release upload url
        id: get_release_upload_url
        run: |
          if [ "${{env.TWINE_REPO}}" -eq "testpypi" ]
          then
            echo "::set-output name=upload_url::${{steps.create_draft_gh_release.upload_url}}"
          else
            echo "::set-output name=upload_url::${{steps.create_gh_release.upload_url}}"
          fi
      - name: Fetch pip artifacts
        uses: actions/github-script@v3.1.0
        with:
          script: |
            var artifacts = await github.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: ${{github.event.workflow_run.id }},
            });
            var matchArtifact = artifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "pip-${{env.PKG_NAME}}-${{env.PKG_VERSION}}"
            })[0];
            var download = await github.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            var fs = require('fs');
            var dir = '${{github.workspace}}' + '/dist';
            if (!fs.existsSync(dir)) {
                fs.mkdirSync(dir, { recursive: true });
            }
            fs.writeFileSync('${{github.workspace}}/dist/pip-${{env.PKG_NAME}}-${{env.PKG_VERSION}}', Buffer.from(download.data));
      - name: Publish pip release
        run: |
          cp -r ./cicd/docker-template/element_build_release/dist/alpine/* .
          export HOST_UID=$(id -u)
          pip install twine && python -m twine upload --repository ${{env.TWINE_REPO}} dist/*
      - name: Determine pip artifact paths
        run: |
          echo "PKG_WHEEL_PATH=$(ls dist/${PKG_NAME}-*.whl)" >> $GITHUB_ENV
          echo "PKG_SDIST_PATH=$(ls dist/${SDIST_PKG_NAME}-*.tar.gz)" >> $GITHUB_ENV
      - name: Upload pip wheel asset to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          upload_url: ${{steps.get_release_upload_url.outputs.upload_url}}
          asset_path: ${{env.PKG_WHEEL_PATH}}
          asset_name: pip-${{env.PKG_NAME}}-${{env.PKG_VERSION}}.whl
          asset_content_type: application/zip
      - name: Upload pip sdist asset to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          upload_url: ${{steps.get_release_upload_url.outputs.upload_url}}
          asset_path: ${{env.PKG_SDIST_PATH}}
          asset_name: pip-${{env.SDIST_PKG_NAME}}-${{env.PKG_VERSION}}.tar.gz
          asset_content_type: application/gzip
      - name: Delete drafts
        uses: hugo19941994/delete-draft-releases@v1.0.0
        with:
          threshold: 7d
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}